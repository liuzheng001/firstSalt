'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getPageSize = function () {
  var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

  var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

  var result = { width: width, height: height };

  return function () {
    return result;
  };
}();

var processData = function processData(data) {
  var values = [];
  if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && !(data instanceof Array)) {
    var keys = Object.keys(data);
    values = keys.map(function (key) {
      return {
        value: key,
        text: data[key]
      };
    });
  } else {
    values = data;
  }
  return values;
};

// const debounce = (func, wait, immediate) => {
//   let timeout;
//   return function origin(...args) {
//     const t = this;
//     const later = () => {
//       timeout = null;
//       if (!immediate) func.apply(t, args);
//     };
//     const callNow = immediate && !timeout;
//     clearTimeout(timeout);
//     timeout = setTimeout(later, wait);
//     if (callNow) func.apply(t, args);
//   };
// };

var toString = Object.prototype.toString;


var isArray = function isArray(arg) {
  return toString.call(arg) === '[object Array]';
};

var addUrlParam = function addUrlParam(name, value) {
  var currentUrl = window.location.href;
  var reg = void 0;
  if (/\?/g.test(currentUrl)) {
    reg = new RegExp(name + '=[-\\w]{4,25}', 'g');
    if (reg.test(currentUrl)) {
      currentUrl = currentUrl.replace(reg, name + '=' + value);
    } else {
      currentUrl += '&' + name + '=' + value;
    }
  } else {
    currentUrl += '?' + name + '=' + value;
  }
  return currentUrl;
};

var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ#';

// 格式化方法类型
var FORMATTER_TYPES = {
  LABEL_FORMATTER: 'label', // 回填值显示
  OPTION_FORMATTER: 'option' // panel选项显示

};

exports.default = {
  getPageSize: getPageSize,
  processData: processData,
  debounce: _debounce2.default,
  isArray: isArray,
  addUrlParam: addUrlParam,
  alphabet: alphabet,
  FORMATTER_TYPES: FORMATTER_TYPES
};
module.exports = exports['default'];