'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contains = require('rc-util/lib/Dom/contains');

var _contains2 = _interopRequireDefault(_contains);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var preventDefault = function preventDefault(e) {
  e.preventDefault();
};

var stopBodyScrolling = function stopBodyScrolling(bool) {
  if (bool === true) {
    document.body.addEventListener('touchmove', preventDefault, false);
  } else {
    document.body.removeEventListener('touchmove', preventDefault, false);
  }
};

var stopBodyScroll = function stopBodyScroll(element) {
  var pd = function pd(e) {
    if (!element || !(0, _contains2.default)(element, e.target)) {
      e.preventDefault();
    }
  };
  document.body.addEventListener('touchmove', pd, false);
  // TODO how to stop body scroll when element is scrolled to the end?
  // const sp = (e) => {
  //   e.stopPropagation();
  // };
  // if (element) {
  //   element.addEventListener('touchmove', sp, false);
  // }
  return {
    enable: function enable() {
      document.body.removeEventListener('touchmove', pd, false);
      // if (element) {
      //   element.removeEventListener('touchmove', sp, false);
      // }
    }
  };
};

// uniform locale for en-us, en_US
var getLocale = function getLocale(locale) {
  if (typeof locale === 'string') {
    var spliter = locale.match(/[-_]/) ? locale.match(/[-_]/)[0] : '';
    if (!spliter) {
      return locale;
    }
    return locale.toLowerCase().split(spliter).join('-');
  }
  return locale;
};

var shouldUpdate = function shouldUpdate(prevProps, nextProps) {
  var keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var update = false;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    update = !(0, _isEqual2.default)(prevProps[key], nextProps[key]);
    if (update) break;
  }
  return update;
};

exports.default = {
  stopBodyScrolling: stopBodyScrolling,
  getLocale: getLocale,
  stopBodyScroll: stopBodyScroll,
  shouldUpdate: shouldUpdate
};
module.exports = exports['default'];