{"version":3,"file":null,"sources":["../src/util.js","../src/ajax.js","../src/jsonp.js","../src/event.js","../src/request.js","../src/defer.js","../src/plugin.loop.js","../src/plugin.soon.js","../src/default-global-config.js","../src/natty-fetch.js"],"sourcesContent":["export const hasWindow = 'undefined' !== typeof window\nexport const hasConsole = 'undefined' !== typeof console\nexport const doc = hasWindow ? document : null\nexport const escape = encodeURIComponent\nexport const NULL = null\nexport const TRUE = true\nexport const FALSE = !TRUE\nexport const UNDEFINED = 'undefined'\nexport const EMPTY = ''\n\nconst toString = Object.prototype.toString\nconst ARRAY_TYPE = '[object Array]'\nconst OBJECT_TYPE = '[object Object]'\n\n/**\n * 伪造的`promise`对象\n * NOTE 伪造的promise对象要支持链式调用 保证和`new Promise`返回的对象行为一致\n *    dummyPromise.then().catch().finally()\n */\nexport const dummyPromise = {\n  dummy: TRUE,\n}\n\ndummyPromise.then = dummyPromise['catch'] = () => {\n  // NOTE 这里用了剪头函数 不能用`return this`\n  return dummyPromise\n}\n\n/**\n * 判断是否是IE8~11, 不包含Edge\n * @returns {boolean}\n * @note IE11下 window.ActiveXObject的值很怪异, 所以需要追加 'ActiveXObject' in window 来判断\n */\nexport const isIE = hasWindow && (!!window.ActiveXObject || 'ActiveXObject' in window)\n\nexport function noop(v) {\n  return v\n}\n\n/**\n * 变换两个参数的函数到多个参数\n * @param  {Function} fn 基函数\n * @return {Function} 变换后的函数\n * @demo\n *    function add(x, y) { return x+y; }\n *    add = redo(add);\n *    add(1,2,3) => 6\n */\nexport function redo(fn) {\n  return function () {\n    const args = arguments\n    let ret = fn(args[0], args[1])\n    for (let i = 2, l = args.length; i < l; i++) {\n      ret = fn(ret, args[i])\n    }\n    return ret\n  }\n}\n\n// const random = Math.random\n// const floor = Math.floor\n// export function makeRandom() {\n//   return floor(random() * 9e9)\n// }\n\nconst absoluteUrlReg = /^(https?:)?\\/\\//\nexport function isAbsoluteUrl(url) {\n  return !!url.match(absoluteUrlReg)\n}\n\nconst relativeUrlReg = /^[\\.\\/]/\nexport function isRelativeUrl(url) {\n  return !!url.match(relativeUrlReg)\n}\n\nconst BOOLEAN = 'boolean'\nexport function isBoolean(v) {\n  return typeof v === BOOLEAN\n}\n\nconst STRING = 'string'\nexport function isString(v) {\n  return typeof v === STRING\n}\n\nconst FUNCTION = 'function'\nexport function isFunction(v) {\n  return typeof v === FUNCTION\n}\n\nexport function runAsFn(v) {\n  return isFunction(v) ? v() : v\n}\n\nconst NUMBER = 'number'\nexport function isNumber(v) {\n  return !isNaN(v) && typeof v === NUMBER\n}\n\nconst OBJECT = 'object'\nexport function isObject(v) {\n  return typeof v === OBJECT && v !== NULL\n}\n\nexport function isWindow(v) {\n  return v !== NULL && v === v.window\n}\n\n// 参考了zepto\nexport function isPlainObject(v) {\n  return v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype\n}\n\nexport function isEmptyObject(v) {\n  let count = 0\n  for (let i in v) {\n    if (v.hasOwnProperty(i)) {\n      count++\n    }\n  }\n  return count === 0\n}\n\nexport function isArray(v) {\n  return toString.call(v) === ARRAY_TYPE\n}\n\n/**\n * 判断是否跨域\n * @type {Element}\n * @note 需要特别关注IE8~11的行为是不一样的!!!\n */\nlet originA\nif(doc) {\n  originA = doc.createElement('a')\n  originA.href = location.href\n}\nexport function isCrossDomain(url) {\n\n  let requestA = doc.createElement('a')\n  requestA.href = url\n\n  // 如果`url`的值不包含`protocol`和`host`(比如相对路径), 在标准浏览器下, 会自定补全`requestA`对象的`protocal`和`host`属性.\n  // 但在IE8~11下, 不会自动补全. 即`requestA.protocol`和`requestA.host`的值都是空的.\n  // 在IE11的不同小版本下, requestA.protocol的值有的是`:`, 有的是空字符串, 太奇葩啦!\n  if (__FALLBACK__) {\n    if (isIE && (requestA.protocol === ':' || requestA.protocol === '')) {\n      if (requestA.hostname === '') {\n        //alert(0)\n        return false\n      } else {\n        //alert('1:'+(originA.hostname !== requestA.hostname || originA.port !== requestA.port))\n        return originA.hostname !== requestA.hostname || originA.port !== requestA.port\n      }\n    }\n  }\n\n  // 标准浏览器\n  return originA.hostname !== requestA.hostname || originA.port !== requestA.port || originA.protocol !== requestA.protocol\n}\n\n/**\n * 对象扩展\n * @param  {Object} receiver\n * @param  {Object} supplier\n * @return {Object} 扩展后的receiver对象\n * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!\n * @note 这个extend方法是深拷贝方式的!!!\n */\nfunction _extend(receiver = {}, supplier = {}, deepCopy = FALSE) {\n  for (let key in supplier) {\n    // `supplier`中不是未定义的键 都可以执行扩展\n    if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {\n      if (deepCopy === TRUE) {\n        if (isArray(supplier[key])) {\n          receiver[key] = [].concat(supplier[key])\n        } else if (isPlainObject(supplier[key])) {\n          receiver[key] = extend({}, supplier[key])\n        } else {\n          receiver[key] = supplier[key]\n        }\n      } else {\n        receiver[key] = supplier[key]\n      }\n    }\n  }\n  return receiver\n}\n\nconst extend = redo(_extend)\nexport {extend}\n\n// export function likeArray(v) {\n//   if (!v) {\n//     return false\n//   }\n//   return typeof v.length === NUMBER\n// }\n\n/**\n *\n * @param v {Array|Object} 遍历目标对象\n * @param fn {Function} 遍历器 会被传入两个参数, 分别是`value`和`key`\n */\nexport function each(v, fn) {\n  let i, l\n  if (isArray(v)) {\n    for (i = 0, l = v.length; i < l; i++) {\n      if (fn.call(v[i], v[i], i) === false) return\n    }\n  } else {\n    for (i in v) {\n      if (fn.call(v[i], v[i], i) === false) return\n    }\n  }\n}\n\n/**\n * 将对象的`键`排序后 返回一个新对象\n *\n * @param obj {Object} 被操作的对象\n * @returns {Object} 返回的新对象\n * @case 这个函数用于对比两次请求的参数是否一致\n */\nexport function sortPlainObjectKey(obj) {\n  let clone = {}\n  let key\n  let keyArray = []\n  for (key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      keyArray.push(key)\n      if (isPlainObject(obj[key])) {\n        obj[key] = sortPlainObjectKey(obj[key])\n      }\n    }\n  }\n  keyArray.sort()\n  for (let i=0, l=keyArray.length; i<l; i++) {\n    clone[keyArray[i]] = obj[keyArray[i]]\n  }\n  return clone\n}\n\nexport function serialize(params, obj, traditional, scope) {\n  let type, array = isArray(obj), hash = isPlainObject(obj)\n  each(obj, function(value, key) {\n    type = toString.call(value)\n    if (scope) {\n      key = traditional ? scope : scope + '[' + (hash || type === OBJECT_TYPE || type === ARRAY_TYPE ? key : '') + ']'\n    }\n\n    // 递归\n    if (!scope && array) {\n      params.add(value.name, value.value)\n    }\n    // recurse into nested objects\n    else if (type == ARRAY_TYPE || (!traditional && type == OBJECT_TYPE)) {\n      serialize(params, value, traditional, key)\n    } else {\n      params.add(key, value)\n    }\n  })\n}\n\n/**\n * 功能和`Zepto.param`一样\n * @param obj {Object}\n * @param traditional {Boolean}\n * @returns {string}\n * $.param({ foo: { one: 1, two: 2 }}) // \"foo[one]=1&foo[two]=2)\"\n * $.param({ ids: [1,2,3] })       // \"ids[]=1&ids[]=2&ids[]=3\"\n * $.param({ ids: [1,2,3] }, true)   // \"ids=1&ids=2&ids=3\"\n * $.param({ foo: 'bar', nested: { will: 'not be ignored' }})  // \"foo=bar&nested[will]=not+be+ignored\"\n * $.param({ foo: 'bar', nested: { will: 'be ignored' }}, true)  // \"foo=bar&nested=[object+Object]\"\n * $.param({ id: function(){ return 1 + 2 } })  // \"id=3\"\n */\nexport function param(obj, traditional) {\n  var params = []\n  params.add = (key, value) => {\n    if (isFunction(value)) value = value()\n    if (value == NULL) value = ''\n    params.push(escape(key) + '=' + escape(value))\n  }\n  serialize(params, obj, traditional)\n  return params.join('&').replace(/%20/g, '+')\n}\n\nexport function decodeParam(str) {\n  return decodeURIComponent(str.replace(/\\+/g, ' '))\n}\n\n// 给URL追加查询字符串\nexport function appendQueryString(url, obj, urlStamp, traditional) {\n  // 是否添加时间戳\n  if (urlStamp) {\n    obj[isBoolean(urlStamp) ? '_stamp' : urlStamp] = +new Date()\n  }\n  let queryString = param(obj, traditional)\n\n  if (queryString) {\n    return url + (~url.indexOf('?') ? '&' : '?') + queryString\n  } else {\n    return url\n  }\n}\n\n// 随机字符串字符集\nconst chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'\n\n// 创建随机字符串\nexport function makeRandom(n = 6) {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return str\n}\n\nexport function makeMessage(str, obj, log = false) {\n  log && hasConsole && console.log(str + '\\n' + JSON.stringify(obj, null, 2))\n  return str\n}","import {\n  extend, appendQueryString, noop, isCrossDomain, isBoolean, param,\n  TRUE, FALSE, NULL, UNDEFINED,\n} from './util'\n\nconst supportCORS = UNDEFINED !== typeof XMLHttpRequest && 'withCredentials' in (new XMLHttpRequest())\nconst GET = 'GET'\nconst SCRIPT = 'script'\nconst XML = 'xml'\nconst JS0N = 'json' // NOTE 不能使用`JSON`，这里用数字零`0`代替了字母`O`\n\n// minetype的简写映射\n// TODO 考虑是否优化\nconst acceptToRequestHeader = {\n  // IIS returns `application/x-javascript` 但应该不需要支持\n  '*':  '*/' + '*',\n  script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript',\n  json:   'application/json, text/json',\n  xml:  'application/xml, text/xml',\n  html:   'text/html',\n  text:   'text/plain',\n}\n\n// 设置请求头\n// 没有处理的事情：跨域时使用者传入的多余的Header没有屏蔽 没必要\nconst setHeaders = (xhr, options) => {\n\n  const header = {\n    Accept: acceptToRequestHeader[options.accept],\n  }\n\n  // 如果没有跨域 则打该标识 业界通用做法\n  if (!isCrossDomain(options.url)) {\n    header['X-Requested-With'] = 'XMLHttpRequest'\n  }\n\n  // 如果POST方法，没有明确指定编码方式，默认urlencoded，\n  // TODO v3.x将去掉改处理！！！需要文档强调\n  if (options.method === 'POST' && !header['Content-Type']) {\n    header['Content-Type'] = 'application/x-www-form-urlencoded'\n  }\n\n  extend(header, options.header)\n\n  for (let key in header) {\n    xhr.setRequestHeader(key, header[key])\n  }\n\n  return header\n}\n\n// 绑定事件\n// NOTE 还得继续使用readystatechange事件\n//    比较遗憾 到现在了依然不能安全的使用load和error等事件 就连PC端的chrome都有下面的问题\n//    500: 触发load loadend 不触发error\n//    404: 触发load loadend 不触发error\nconst setEvents = (xhr, options) => {\n\n  // 再高级的浏览器都有低级错误! 已经不能在相信了!\n  // MAC OSX Yosemite Safari上的低级错误: 一次`ajax`请求的`loadend`事件完成之后,\n  // 如果执行`xhr.abort()`, 居然还能触发一遍`abort`和`loadend`事件!!!\n  // `_finished`标识一次完整的请求是否结束, 如果已结束, 则不再触发任何事件\n  xhr._finished = FALSE\n\n  const readyStateChangeFn = () => {\n    // console.log('xhr.status', xhr.status)\n    if (xhr._finished) {\n      return\n    }\n    //console.log('xhr.readyState', xhr.readyState, 'xhr.status', xhr.status, xhr)\n    if (xhr.readyState === 4) {\n      // 如果请求被取消(aborted) 则`xhr.status`会是0 所以不会进入`success`回调\n      if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n        //let mime = xhr.getResponseHeader('Content-Type')\n        let data = xhr.responseText\n        switch (options.accept) {\n          case JS0N:\n            try {\n              data = JSON.parse(data)\n            } catch (e) {\n              console.warn('The response can NOT be parsed to JSON object.', data)\n            }\n            break\n          case SCRIPT:\n            (1, eval)(data)\n            break\n          case XML:\n            data = xhr.responseXML\n            break\n          //case HTML:\n          //case TEXT:\n          default:\n            break\n        }\n        options.success(data, xhr)\n      } else {\n        // 因为取消时会先触发原生的`onreadystatechange`响应，后触发`onAbort`回调，所以\n        // 如果请求被取消(aborted) 则`xhr.status`会是0 程序走到这里的时候，`xhr._aborted`状态是false，\n        // 需要排除，不应该触发`error`回调\n        !xhr._aborted && options.error(xhr.status, xhr)\n      }\n    }\n  }\n\n  // readyState value:\n  //   0: UNSET 未初始化\n  //   1: OPENED\n  //   2: HEADERS_RECEIVED\n  //   3: LOADING\n  //   4: DONE 此时触发load事件\n  xhr.addEventListener(\"readystatechange\", readyStateChangeFn)\n\n  const abortFn = () => {\n    if (xhr._finished) {\n      return\n    }\n    options.abort(xhr.status, xhr)\n  }\n\n  xhr.addEventListener('abort', abortFn)\n\n  const loadedFn = () => {\n    if (xhr._finished) {\n      return\n    }\n    xhr._finished = true\n    options.complete(xhr.status, xhr)\n    delete xhr._aborted\n  }\n\n  xhr.addEventListener('loadend', loadedFn)\n}\n\nconst defaultOptions = {\n  url: '',\n  mark: {},\n  urlMark: TRUE,\n  method: GET,\n  accept: '*',\n  data: NULL,\n  header: {},\n  withCredentials: NULL, // 根据`url`是否跨域决定默认值. 如果显式配置该值(必须是布尔值), 则个使用配置值\n  urlStamp: TRUE,\n  success: noop,\n  error: noop,\n  complete: noop,\n  abort: noop,\n  query: {},\n  log: FALSE,\n  traditional: FALSE,\n}\n\nexport default function ajax(options) {\n\n  options = extend({}, defaultOptions, options)\n\n  // 是否跨域\n  let isCD = isCrossDomain(options.url)\n\n  let xhr = new XMLHttpRequest()\n\n  setEvents(xhr, options)\n\n  xhr.open(options.method, appendQueryString(\n    options.url,\n    extend({}, options.urlMark ? options.mark : {}, options.method === GET ? options.data : {}, options.query),\n    options.urlStamp,\n    options.traditional\n  ))\n\n  // NOTE 生产环境的Server端, `Access-Control-Allow-Origin`的值一定不要配置成`*`!!! 而且`Access-Control-Allow-Credentials`应该是true!!!\n  // NOTE 如果Server端的`responseHeader`配置了`Access-Control-Allow-Origin`的值是通配符`*` 则前端`withCredentials`是不能使用true值的\n  // NOTE 如果Client端`withCredentials`使用了true值 则后端`responseHeader`中必须配置`Access-Control-Allow-Credentials`是true\n  xhr.withCredentials = isBoolean(options.withCredentials) ? options.withCredentials : isCD\n\n  // 设置requestHeader\n  const header = setHeaders(xhr, options)\n\n  let data\n\n  if (header['Content-Type'] && ~header['Content-Type'].indexOf('application/x-www-form-urlencoded')) {\n    data = param(options.data, options.traditional)\n  } else {\n    data = JSON.stringify(options.data)\n  }\n\n  // 文档建议说 send方法如果不发送请求体数据 则null参数在某些浏览器上是必须的\n  xhr.send(options.method === GET ? NULL : data === NULL ? NULL : data)\n\n  let originAbort = xhr.abort\n\n  // 重写`abort`方法\n  xhr.abort = () => {\n    xhr._aborted = true\n    // NOTE 直接调用`originAbort()`时 浏览器会报 `Illegal invocation` 错误\n    originAbort.call(xhr)\n  }\n\n  return xhr\n}\n\n// 移动端不需要fallback\najax.fallback = false\najax.supportCORS = supportCORS","import {appendQueryString, noop, extend, makeRandom, hasWindow, NULL, TRUE, FALSE} from './util'\nconst win = hasWindow ? window : NULL\nconst doc = hasWindow ? document : NULL\nconst SCRIPT = 'script'\n\nconst removeScript = script => {\n  script.onerror = NULL\n  script.parentNode.removeChild(script)\n  script = NULL\n}\nlet head = NULL\nconst insertScript = (url, options) => {\n  let script = doc.createElement(SCRIPT)\n  script.src = url\n  script.async = true\n\n  if (options.crossOrigin) {\n    script.crossOrigin = true\n  }\n\n  script.onerror = () => {\n    win[options.callbackName] = NULL\n    options.error(`${url} 请求出错`)\n    options.complete()\n  }\n  script.onload = () => {\n    setTimeout(() => {\n      if (win[options.callbackName] ) {\n        options.error(`'${url}' 返回值错误`)\n        options.complete()\n      }\n    }, 0)\n  }\n\n  head = head || doc.getElementsByTagName('head')[0]\n  head.insertBefore(script, head.firstChild)\n  return script\n}\n\nconst defaultOptions = {\n  url: '',\n  mark: {},\n  urlMark: TRUE,\n  data: {},\n  urlStamp: TRUE,\n  success: noop,\n  error: noop,\n  complete: noop,\n  log: FALSE,\n  flag: 'callback',\n  callbackName: 'jsonp{id}',\n  traditional: FALSE,\n  crossOrigin: FALSE,\n}\n\nexport default function jsonp(options) {\n\n  options = extend({}, defaultOptions, options)\n\n  const callbackName = options.callbackName = options.callbackName.replace(/\\{id\\}/, makeRandom(6))\n\n  const originComplete = options.complete\n\n  let script\n\n  // 二次包装的`complete`回调\n  options.complete = () => {\n    // 删除脚本\n    removeScript(script)\n    originComplete()\n  }\n\n  // 成功回调\n  win[callbackName] = data => {\n    // JSONP函数需要立即删除 用于`IE8`判断是否触发`onerror`\n    win[callbackName] = NULL\n    options.success(data)\n    options.complete()\n  }\n\n  // 生成`url`\n  let url = appendQueryString(\n    options.url,\n    extend({[options.flag]: callbackName}, options.urlMark ? options.mark : {}, options.data),\n    options.urlStamp,\n    options.traditional\n  )\n\n  // 插入脚本\n  script = insertScript(url, options)\n  \n  return {\n    abort() {\n      // 覆盖成功回调为无数据处理版本\n      win[callbackName] = () => {\n        win[callbackName] = NULL\n      }\n      removeScript(script)\n    },\n  }\n}\n","const PREFIX = '_'\nfunction rename (type) {\n  return PREFIX + type\n}\n\nexport default {\n  on: function () {\n    const args = arguments\n    if (typeof args[0] === 'string' && typeof args[1] === 'function') {\n      const type = rename(args[0])\n      this[type]  = this[type] || []\n      this[type].push(args[1])\n    } else if (typeof args[0] === 'object') {\n      const hash = args[0]\n      for (let i in hash) {\n        if (hash.hasOwnProperty(i)) {\n          this.on(i, hash[i])\n        }\n      }\n    }\n  },\n  off: function (type, fn) {\n    type = rename(type)\n    if (!fn) {\n      delete this[type]\n    } else {\n      const fns = this[type]\n      fns.splice(fns.indexOf(fn), 1)\n      if (!this[type].length) {\n        delete this[type]\n      }\n    }\n  },\n  // @param {array} args\n  fire: function (type, args, context) {\n    const fns = this[rename(type)]\n    if (!fns) return 'NO_EVENT'\n    for (let i=0, l=fns.length; i<l; i++) {\n      fns[i].apply(context || this, [].concat(args))\n    }\n  },\n  hasEvent: function (type) {\n    return !!this[rename(type)]\n  },\n}","import {extend, NULL, TRUE, FALSE, isAbsoluteUrl, isRelativeUrl, EMPTY, makeRandom, makeMessage} from './util'\nimport ajax from './__AJAX__'\nimport jsonp from './__JSONP__'\n\nexport default class Request {\n  constructor(apiInstance) {\n    const {_path, config, api, contextId} = apiInstance\n\n    this._apiInstance = apiInstance\n\n    // 单次请求实例的id，用于从`api`实例的`_pendingList`中删除请求实例\n    this._rid = [contextId, _path, makeRandom(6)].join('-')\n\n    this._path = _path\n    this.config = config\n    this.storage = api.storage\n    this.contextId = contextId\n\n    // 工作状态\n    this.pending = FALSE\n    this._requester = NULL\n  }\n\n  // 发起网络请求 返回一个Promise实例\n  // 钩子事件发生的顺序：willFetch，didFetch，fit，process\n  send({vars, onSuccess, onError, onComplete}) {\n\n    this.vars = vars\n\n    this.onSuccess = onSuccess\n    this.onError = onError\n    this.onComplete = onComplete\n\n    const {config} = this\n\n    // 调用 willFetch 钩子\n    config.willFetch(vars, config, 'remote')\n\n    // 等待状态在此处开启 在相应的`requester`的`complete`回调中关闭\n    this.pending = TRUE\n\n    // 创建请求实例requester\n    if (config.customRequest) {\n      // 使用私有的request方法\n      this._requester = config.customRequest(vars, config, (isSuccess, response) => {\n        // 当isSuccess为false时，response的结构应该是 {message: 'xxx'}\n        isSuccess ? this.processResponse(response) : this.onError(response)\n      })\n    } else if (config.jsonp) {\n      this._requester = this.jsonp()\n    } else {\n      this._requester = this.ajax()\n    }\n\n    vars.requester = this._requester\n\n    // 超时处理\n    if (0 !== config.timeout) {\n      setTimeout(() => {\n        if (this.pending) {\n          // 取消请求\n          this.abort()\n\n          const error = {\n            timeout: TRUE,\n            message: makeMessage('Request Timeout', {\n              context: this.contextId,\n              api: `${vars.api}`,\n              timeout: config.timeout + 'ms',\n            }, config.log),\n          }\n\n          this.onError(error)\n        }\n      }, config.timeout)\n    }\n  }\n\n  // 处理结构化的响应数据\n  processResponse(response) {\n    const {config, vars} = this\n    // 调用 didFetch 钩子函数\n    config.didFetch(vars, config)\n\n    // 非标准格式数据的预处理\n    response = config.fit(response, vars)\n\n    if (response.success) {\n      // 数据处理\n      const content = config.process(response.content, vars)\n      this.onSuccess(content)\n    } else {\n      const error = extend({\n        message: 'Error in request: ' + this._path,\n      }, response.error)\n      // NOTE response是只读的对象!!!\n      this.onError(error)\n    }\n  }\n\n  // 获取正式接口的完整`url`\n  // @param config {Object}\n  getFinalUrl() {\n    const {config, vars} = this\n    let url = config.mock ? config.mockUrl : config.url\n    if (!url) return EMPTY\n    const prefixKey = config.mock ? 'mockUrlPrefix' : 'urlPrefix'\n    const suffixKey = config.mock ? 'mockUrlSuffix' : 'urlSuffix'\n    const prefix = config[prefixKey] && !isAbsoluteUrl(url) && !isRelativeUrl(url) ? config[prefixKey] : EMPTY\n    const suffix = config[suffixKey] ? config[suffixKey]: EMPTY\n\n    url = prefix + url + suffix\n\n    // 如果是RESTFul API，填充所有的':x'参数\n    if (config.rest) {\n      const restData = vars.data\n      for (let param in restData) {\n        if (restData.hasOwnProperty(param) && ~param.indexOf(':')) {\n          url = url.replace(new RegExp('\\\\/' + param), '/' + restData[param])\n          delete restData[param]\n        }\n      }\n    }\n\n    return url\n  }\n\n  // 发起Ajax请求\n  // @returns {Object} xhr对象实例\n  ajax() {\n    const {config, vars} = this\n\n    const url = this.getFinalUrl()\n\n    return ajax({\n      traditional: config.traditional,\n      urlStamp: config.urlStamp,\n      mark: vars.mark,\n      urlMark: config.urlMark,\n      log: config.log,\n      url: url,\n      method: config.method,\n      data: vars.data,\n      header: config.header,\n      query: config.query,\n      withCredentials: config.withCredentials,\n      // 强制约定json\n      accept: 'json',\n      success: response => {\n        this.processResponse(response)\n      },\n      error: status => {\n        // 如果跨域使用了自定义的header，且服务端没有配置允许对应的header，此处status为0，目前无法处理。\n        const error = {\n          status,\n          message: makeMessage(`Request Error(Status: ${status})`, {\n            status: status,\n            context: this.contextId,\n            api: vars.api,\n            url: url,\n          }, config.log),\n        }\n        this.onError(error)\n      },\n      complete: () => {\n        this.onComplete()\n        this.pending = FALSE\n        this._requester = NULL\n      },\n    })\n  }\n\n  // 发起jsonp请求\n  // @returns {Object} 带有abort方法的对象\n  jsonp() {\n    const {config, vars} = this\n\n    const url = this.getFinalUrl()\n\n    return jsonp({\n      traditional: config.traditional,\n      log: config.log,\n      mark: vars.mark,\n      urlMark: config.urlMark,\n      url: url,\n      data: vars.data,\n      urlStamp: config.urlStamp,\n      flag: config.jsonpFlag,\n      callbackName: config.jsonpCallbackName,\n      crossOrigin: config.jsonpCrossOrigin,\n      success: response => {\n        this.processResponse(response)\n      },\n      error: e => {\n        const error = {\n          message: makeMessage(`Request Error(Not Accessable JSONP)，${e}`, {\n            context: this.contextId,\n            api: vars.api,\n            url: url,\n          }, config.log),\n        }\n        this.onError(error)\n      },\n      complete: () => {\n        this.onComplete()\n        this.pending = FALSE\n        this._requester = NULL\n      },\n    })\n  }\n\n  // 取消请求\n  abort() {\n    if (this._requester) {\n      this._requester.abort()\n    }\n  }\n}","export default class Defer {\n  constructor(Promise) {\n    const t = this\n    t.promise = new Promise(function (resolve, reject) {\n      t._resolve = resolve\n      t._reject = reject\n    })\n  }\n\n  resolve(value) {\n    this._resolve.call(this.promise, value)\n  }\n\n  reject(reason) {\n    this._reject.call(this.promise, reason)\n  }\n}","import {isNumber, noop, TRUE, FALSE, NULL} from './util'\n\n/**\n * 创建轮询支持\n * @param api {Function} 需要轮询的函数\n */\nexport default function() {\n  const {api} = this\n\n  api.loop = (options, resolveFn = noop, rejectFn = noop) => {\n    if (!options.duration || !isNumber(options.duration)) {\n      throw new Error('Illegal `duration` value for `startLoop` method.')\n    }\n\n    let loopTimer = NULL\n\n    let stop = () => {\n      clearTimeout(loopTimer)\n      loopTimer = NULL\n      stop.looping = FALSE\n    }\n\n    let sleepAndRequest = () => {\n      stop.looping = TRUE\n      api(options.data).then(resolveFn, rejectFn)\n      loopTimer = setTimeout(() => {\n        sleepAndRequest()\n      }, options.duration)\n    }\n\n    sleepAndRequest()\n    \n    return stop\n  }\n}\n","import {noop, FALSE, TRUE, hasConsole} from './util'\n\nexport default function() {\n  const {api} = this\n  api.soon = (data, successFn = noop, errorFn = noop) => {\n    const vars = this.makeVars(data)\n\n    // 先尝试用`storage`数据快速响应\n    if (api.storageUseable) {\n\n      const result = api.storage.has(vars.queryString)\n\n      if (result.has) {\n        successFn({\n          fromStorage: TRUE,\n          content: result.value,\n        })\n      }\n    }\n\n    // 再发起网络请求(内部会更新`storage`)\n    // api方法是请求的入口方法，不一定会发起网络请求，api方法内部，通过调用send方法来发起真正的网络请求\n    this.send(vars).then(content => {\n      successFn({\n        fromStorage: FALSE,\n        content,\n      })\n    }, error => {\n      errorFn(error)\n    })['catch'](function (e) {\n      hasConsole && console.error(e)\n    })\n  }\n}","import {noop, NULL, TRUE, FALSE, EMPTY, hasWindow} from './util'\n\nconst config = {\n\n  // 默认参数\n  data: {},\n\n  // 请求完成钩子函数\n  didFetch: noop,\n\n  // 预处理回调\n  fit: noop,\n\n  // 自定义header, 只针对非跨域的ajax有效, 跨域时将忽略自定义header\n  header: {},\n\n  // 是否忽律接口自身的并发请求\n  ignoreSelfConcurrent: FALSE,\n\n  // 有两种格式配置`jsonp`的值\n  // {Boolean}\n  // {Array} eg: [TRUE, 'cb', 'j{id}']\n  jsonp: FALSE,\n\n  // 是否在`jsonp`的`script`的标签上加`crossorigin`属性\n  jsonpCrossOrigin: FALSE,\n\n  // 是否开启log信息\n  log: FALSE,\n\n  // 非GET方式对JSONP无效\n  method: 'GET',\n\n  // 是否开启mock模式\n  mock: FALSE,\n\n  mockUrl: EMPTY,\n\n  // 全局`mockUrl`前缀\n  mockUrlPrefix: EMPTY,\n\n  // 全局`mockUrl`后缀\n  mockUrlSuffix: EMPTY,\n\n  // 成功回调\n  process: noop,\n\n  // 私有Promise对象, 如果不想用浏览器原生的Promise对象的话\n  Promise: hasWindow ? window.Promise : NULL,\n\n  // 是否是rest风格\n  rest: FALSE,\n\n  // 默认不执行重试\n  retry: 0,\n\n  query: {},\n\n  // 使用已有的request方法\n  customRequest: NULL,\n\n  // 0表示不启动超时处理\n  timeout: 0,\n\n  // http://zeptojs.com/#$.param\n  traditional: FALSE,\n\n  url: EMPTY,\n\n  // 全局`url`前缀\n  urlPrefix: EMPTY,\n\n  // 是否在`url`上添加辅助开发的标记，如`_api=xxx&_mock=false`\n  urlMark: true,\n\n  // 是否在`url`上添加时间戳，如`_stamp=xxx`，用于避免浏览器的304缓存\n  urlStamp: TRUE,\n\n  // 全局`url`后缀\n  urlSuffix: EMPTY,\n\n  // TODO 文档中没有暴露\n  withCredentials: NULL,\n\n  // 请求之前调用的钩子函数\n  willFetch: noop,\n\n  // 扩展: storage\n  storage: FALSE,\n\n  // 插件，已内置两种\n  // plugins: [\n  //   nattyFetch.plugin.loop\n  //   nattyFetch.plugin.soon\n  // ]\n  plugins: FALSE,\n}\n\nexport default config","import nattyStorage from 'natty-storage'\nimport * as util from './util'\n\nconst {\n  extend, runAsFn, isBoolean,\n  isArray, isFunction, sortPlainObjectKey, isEmptyObject,\n  isPlainObject, dummyPromise,\n  isString, NULL, TRUE, FALSE, hasConsole, makeRandom,\n} = util\n\nimport Request from './request'\nimport ajax from './__AJAX__'\nimport Defer from './defer'\nimport event from './event'\n\n// 内置插件\nimport pluginLoop from './plugin.loop'\nimport pluginSoon from './plugin.soon'\n\n// 全局默认配置\nimport defaultGlobalConfig from './default-global-config'\n\n// 随`setGlobal`方法而变化的运行时全局配置\nlet runtimeGlobalConfig = extend({}, defaultGlobalConfig)\n\nclass API {\n  constructor(path, options, contextConfig, contextId) {\n    this._path = path\n\n    this.contextConfig = contextConfig\n\n    this.contextId = contextId\n\n    // 进行中的请求列队\n    this._pendingList = []\n\n    this.storage = NULL\n\n    const config = this.config = this.processAPIOptions(options)\n\n    // `api`的实现\n    // @param data {Object|Function}\n    // @returns {Object} Promise Object\n    this.api = data => {\n\n      // 处理列队中的请求\n      if (this._pendingList.length) {\n        // 是否忽略自身的并发请求\n        if (config.ignoreSelfConcurrent) {\n          return dummyPromise\n        }\n        // 是否取消上一个请求\n        if (config.overrideSelfConcurrent) {\n          this._pendingList[0].abort()\n        }\n      }\n\n      const vars = this.makeVars(data)\n\n      if (this.api.storageUseable) {\n        const result = this.api.storage.has(vars.queryString)\n        if (result.has) {\n          return new config.Promise(resolve => {\n            resolve(result.value)\n          })\n        } else {\n          return config.retry === 0 ? this.send(vars) : this.sendWithRetry(vars)\n        }\n      } else {\n        return config.retry === 0 ? this.send(vars) : this.sendWithRetry(vars)\n      }\n    }\n\n    this.api.config = config\n\n    this.api.hasPending = () => {\n      return !!this._pendingList.length\n    }\n\n    // 要删除的方法，这个地方是`v2.3.0`版本之前都存在的设计错误，因为：\n    // io.get().then(...) 发送第一次\n    // io.get().then(...) 发送第二次\n    // io.get.abort()   取消哪一次? 并发情况复杂的业务，结果不明确。\n    // 当前的解决方式是取消所有，不完美\n    this.api.abort = () => {\n      hasConsole && console.warn('`abort` method will be deleted later!')\n      for (let i=0, l=this._pendingList.length; i<l; i++) {\n        this._pendingList[i].abort()\n      }\n    }\n\n    this.initStorage()\n\n    // 启动插件\n    let plugins = isArray(config.plugins) ? config.plugins : []\n\n    for (let i=0, l=plugins.length; i<l; i++) {\n      isFunction(plugins[i]) && plugins[i].call(this, this)\n    }\n  }\n\n  // @param {Object} 一次独立的请求数据\n  makeVars(data) {\n    const {config} = this\n    // 每次请求私有的相关数据\n    const vars = {\n      // `url`中的标记\n      mark: {\n        _api: this._path,\n        _mock: config.mock,\n      },\n      // 此api是定义接口时的多层级命名路径(如：'foo.bar.getList')，不是发起请求时的url地址\n      api: this._path,\n      mock: config.mock,\n      // 上下文id值，如果在调用nattyFetch.context方法时没有指定上下文的名称，默认采用c0，c1\n      contextId: this.contextId,\n    }\n\n    // `data`必须在请求发生时实时创建\n    // 另外，将数据参数存在私有标记中, 方便API的`process`方法内部使用\n    data = extend({}, runAsFn(config.data), runAsFn(data))\n\n    // 承载请求参数数据\n    vars.data = data\n\n    // 根据`data`创建`storage`查询用的`key`\n    if (this.api.storageUseable) {\n      vars.queryString = isEmptyObject(data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(data))\n    }\n\n    return vars\n  }\n\n  // 发送真正的网络请求\n  send(vars) {\n    const {config} = this\n\n    // 每次请求都创建一个请求实例\n    const request = new Request(this)\n\n    this._pendingList.push(request)\n\n    const defer = new Defer(config.Promise)\n\n    request.send({\n      vars,\n      onSuccess: content => {\n        if (this.api.storageUseable) {\n          this.api.storage.set(vars.queryString, content)\n        }\n        defer.resolve(content)\n        event.fire('g.resolve', [content, config], config)\n        event.fire(this.contextId + '.resolve', [content, config], config)\n      },\n      onError: error => {\n        defer.reject(error)\n        event.fire('g.reject', [error, config, vars], config)\n        event.fire(this.contextId + '.reject', [error, config, vars], config)\n      },\n      onComplete: () => {\n        let indexToRemove\n        for (let i=0, l=this._pendingList.length; i<l; i++) {\n          if (this._pendingList[i] === request) {\n            indexToRemove = i\n            break\n          }\n        }\n        indexToRemove !== undefined && this._pendingList.splice(indexToRemove, 1)\n      },\n    })\n\n    return defer.promise\n  }\n\n  sendWithRetry(vars) {\n    const {config} = this\n\n    return new config.Promise((resolve, reject) => {\n\n      let retryTime = 0\n      const sendOneTime = () => {\n        // 更新的重试次数\n        vars.mark._retryTime = retryTime\n        this.send(vars).then(content => {\n          resolve(content)\n        }, error => {\n          if (retryTime === config.retry) {\n            reject(error)\n          } else {\n            retryTime++\n            sendOneTime()\n          }\n        })\n      }\n      sendOneTime()\n    })\n  }\n\n  // 处理API的配置\n  // @param options {Object}\n  processAPIOptions(options) {\n\n    // 插件是不能覆盖的, 应该追加\n    const plugins = [].concat(this.contextConfig.plugins || [], options.plugins || [])\n\n    const config = extend({}, this.contextConfig, options, {\n      plugins,\n    })\n\n    // 按照[boolean, callbackKeyWord, callbackFunctionName]格式处理\n    if (isArray(options.jsonp)) {\n      config.jsonp = isBoolean(options.jsonp[0]) ? options.jsonp[0] : FALSE\n      // 这个参数只用于jsonp\n      if (config.jsonp) {\n        config.jsonpFlag = options.jsonp[1]\n        config.jsonpCallbackName = options.jsonp[2]\n      }\n    }\n\n    // 配置自动增强 如果`url`的值有`.jsonp`结尾 则认为是`jsonp`请求\n    // NOTE jsonp是描述正式接口的 不影响mock接口!!!\n    if (!config.mock && !!config.url.match(/\\.jsonp(\\?.*)?$/)) {\n      config.jsonp = TRUE\n    }\n\n    return config\n  }\n\n  // 初始化缓存对象\n  initStorage() {\n    const {config} = this\n\n    // 简易开启缓存的写法\n    if (config.storage === TRUE) {\n      config.storage = {\n        type: 'variable',\n      }\n    }\n\n    // 综合判断缓存是不是可以启用\n    this.api.storageUseable = isPlainObject(config.storage)\n      && (config.method === 'GET' || config.jsonp)\n      && (\n        nattyStorage.supportStorage\n        && (\n          ['localStorage', 'sessionStorage'].indexOf(config.storage.type) > -1\n          || config.storage.type === 'variable'\n        )\n      )\n\n    // 创建缓存实例\n    if (this.api.storageUseable) {\n      // 当使用`localStorage`时, 强制指定`key`值。如果没指定, 抛错!\n      // 当使用`variable`或`sessionStorage`时, 如果没指定`key`, 则自动生成内部`key`\n      // !!!为什么在使用`localStorage`时必须指定`key`值???\n      // !!!因为当key发生变化时, `localStorage`很容易产生死数据, 必须强制开发者有意识的去维护`key`值\n      if (config.storage.type === 'localStorage') {\n        if (!config.storage.hasOwnProperty('key') || !config.storage.key) {\n          throw new Error('`key` is required when `storage.type` is `localStorage`.')\n        }\n      } else {\n        config.storage.key = config.storage.key || [this.contextId, this._path].join('_')\n      }\n\n      // `key`和`tag`的选择原则:\n      // `key`只选用相对稳定的值, 减少因为`key`的改变而增加的残留缓存\n      // 经常变化的值用于`tag`, 如一个接口在开发过程中可能使用方式不一样, 会在`jsonp`和`get`之间切换。\n      this.api.storage = nattyStorage(extend({}, config.storage, {\n        tag: [\n          config.storage.tag,\n          config.jsonp ? 'jsonp' : config.method,\n          config.url,\n        ].join('_'), // 使用者的`tag`和内部的`tag`, 要同时生效\n      }))\n    }\n  }\n}\n\nconst context = (contextId, options) => {\n  if (isString(contextId)) {\n    options = options || {}\n  } else {\n    options = contextId || {}\n    contextId = 'c' + makeRandom()\n  }\n\n  const storage = nattyStorage({\n    type: 'variable',\n    key: contextId,\n  })\n\n  const ctx = {}\n\n  ctx.api = storage.get()\n\n  ctx._contextId = contextId\n\n  // 插件是不能覆盖的, 应该追加\n  let plugins = [].concat(runtimeGlobalConfig.plugins || [], options.plugins || [])\n\n  ctx._config = extend({}, runtimeGlobalConfig, options, {\n    plugins,\n  })\n\n  // 创建api\n  // @param namespace {String} optional\n  // @param APIs {Object} 该`namespace`下的`api`配置\n  ctx.create = function(namespace, APIs) {\n    let hasNamespace = arguments.length === 2 && isString(namespace)\n\n    if (!hasNamespace) {\n      APIs = namespace\n    }\n\n    for (let path in APIs) {\n      if (APIs.hasOwnProperty(path)) {\n        storage.set(\n          hasNamespace ? namespace + '.' + path : path,\n          new API(\n            hasNamespace ? namespace + '.' + path : path,\n            runAsFn(APIs[path]),\n            ctx._config,\n            contextId\n          ).api\n        )\n      }\n    }\n\n    ctx.api = storage.get()\n  }\n\n  // 绑定上下文事件\n  ctx.on = function(name, fn) {\n    if (!isFunction(fn)) return\n    event.on(ctx._contextId + '.' + name, fn)\n    return ctx\n  }\n\n  return ctx\n}\n\nconst nattyFetch = {}\n\n// 简易接口\n// @param options\nnattyFetch.create = function (options) {\n  return new API('nattyFetch', runAsFn(options), defaultGlobalConfig, 'global').api\n}\n\nextend(nattyFetch, {\n  onlyForModern: !__FALLBACK__, // eslint-disable-line\n  version: '__VERSION__',\n  _util: util,\n  _event: event,\n  _ajax: ajax,\n  context,\n\n  // 执行全局配置\n  // @param options\n  setGlobal(options) {\n    runtimeGlobalConfig = extend({}, defaultGlobalConfig, options)\n    return this\n  },\n\n  // 获取全局配置\n  // @param property {String} optional\n  // @returns {*}\n  getGlobal(property) {\n    return property ? runtimeGlobalConfig[property] : runtimeGlobalConfig\n  },\n\n  // 绑定全局事件\n  on(name, fn) {\n    if (!isFunction(fn)) return\n    event.on('g.' + name, fn)\n    return this\n  },\n\n  // 插件名称空间\n  plugin: {\n    loop: pluginLoop,\n    soon: pluginSoon,\n  },\n})\n\n// 内部直接将运行时的全局配置初始化到默认值\nnattyFetch.setGlobal(defaultGlobalConfig)\n\nexport default nattyFetch"],"names":["noop","v","redo","fn","let","args","arguments","ret","i","l","length","isAbsoluteUrl","url","match","absoluteUrlReg","isRelativeUrl","relativeUrlReg","isBoolean","BOOLEAN","isString","STRING","isFunction","FUNCTION","runAsFn","isNumber","isNaN","NUMBER","isObject","OBJECT","NULL","isWindow","window","isPlainObject","Object","getPrototypeOf","prototype","isEmptyObject","count","hasOwnProperty","isArray","toString","call","ARRAY_TYPE","isCrossDomain","requestA","doc","createElement","href","originA","hostname","port","protocol","_extend","receiver","supplier","deepCopy","FALSE","key","undefined","TRUE","concat","extend","each","sortPlainObjectKey","obj","clone","keyArray","push","sort","serialize","params","traditional","scope","type","array","hash","value","OBJECT_TYPE","add","name","param","escape","join","replace","decodeParam","str","decodeURIComponent","appendQueryString","urlStamp","Date","queryString","indexOf","makeRandom","n","chars","charAt","Math","floor","random","makeMessage","log","hasConsole","console","JSON","stringify","ajax","options","defaultOptions","isCD","xhr","XMLHttpRequest","setEvents","open","method","urlMark","mark","GET","data","query","withCredentials","const","header","setHeaders","send","originAbort","abort","_aborted","jsonp","script","callbackName","originComplete","complete","removeScript","win","success","flag","insertScript","rename","PREFIX","hasWindow","document","encodeURIComponent","UNDEFINED","EMPTY","dummyPromise","dummy","then","isIE","ActiveXObject","location","supportCORS","SCRIPT","XML","JS0N","acceptToRequestHeader","*","json","xml","html","text","Accept","accept","setRequestHeader","_finished","readyStateChangeFn","readyState","status","responseText","parse","e","warn","eval","responseXML","error","addEventListener","abortFn","loadedFn","fallback","onerror","parentNode","removeChild","head","src","async","crossOrigin","onload","setTimeout","getElementsByTagName","insertBefore","firstChild","Request","apiInstance","_path","config","api","contextId","this","_apiInstance","_rid","storage","pending","_requester","ref","vars","onSuccess","onError","onComplete","willFetch","customRequest","isSuccess","response","processResponse","requester","timeout","this$1","message","context","didFetch","fit","content","process","getFinalUrl","mock","mockUrl","prefixKey","suffixKey","prefix","suffix","rest","restData","RegExp","jsonpFlag","jsonpCallbackName","jsonpCrossOrigin","Defer","Promise","t","promise","resolve","reject","_resolve","_reject","reason","on","off","fns","splice","fire","apply","hasEvent","loop","resolveFn","rejectFn","duration","Error","loopTimer","stop","clearTimeout","looping","sleepAndRequest","soon","successFn","errorFn","makeVars","storageUseable","result","has","fromStorage","ignoreSelfConcurrent","mockUrlPrefix","mockUrlSuffix","retry","urlPrefix","urlSuffix","plugins","runtimeGlobalConfig","defaultGlobalConfig","API","path","contextConfig","_pendingList","processAPIOptions","overrideSelfConcurrent","sendWithRetry","hasPending","initStorage","_api","_mock","request","defer","set","event","indexToRemove","retryTime","sendOneTime","_retryTime","nattyStorage","supportStorage","tag","ctx","get","_contextId","_config","create","namespace","APIs","hasNamespace","nattyFetch","onlyForModern","version","_util","util","_event","_ajax","setGlobal","getGlobal","property","plugin","pluginLoop","pluginSoon"],"mappings":"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"}