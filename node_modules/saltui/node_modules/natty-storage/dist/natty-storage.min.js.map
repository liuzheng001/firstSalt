{"version":3,"file":"natty-storage.min.js","sources":["../src/natty-storage.js","../src/util.js","../src/env.js"],"sourcesContent":["import {extend, isPlainObject, noop, hasWindow, hasConsole} from './util'\nimport {env, isEnv} from './env'\n\nconst NULL = null\nconst EMPTY = ''\nconst TRUE = true\nconst FALSE = !TRUE\nconst UNDEFINED = undefined\nconst supportStorage = isSupportStorage()\n\n// 全局默认配置\nconst defaultGlobalConfig = {\n  // localStorage, sessionStorage, variable\n  type: 'variable',\n\n  // 存到浏览器缓存中使用的键\n  key: EMPTY,\n\n  // 版本号\n  tag: EMPTY,\n\n  // 有效期长, 单位ms\n  duration: 0,\n\n  // 有效期至, 时间戳\n  until: 0,\n}\n\nclass Storage {\n  constructor(options = {}) {\n\n    this.config = extend({}, defaultGlobalConfig, options)\n\n    // 必须配置`key`!!! 无论什么类型!!!\n    if (!this.config.key) {\n      throw new Error('`key` is required when creating a storage!')\n    }\n\n    this._storage = (this.config.type !== 'variable' && supportStorage) ?\n      createStorage(this.config.type) : createVariable()\n\n    this._CHECK_KEY = 'NSCheck:' + this.config.key\n    this._DATA_KEY = 'NSData:' + this.config.key\n\n    // 每个`storage`实例对象都是全新的, 只有`storage`实例的数据才可能是缓存的.\n    this._createStamp = +new Date()\n\n    // 数据备份\n    // 每次set新值之前，先备份当前数据，如果set过程中失败了，则恢复该备份数据\n    this._backupData = {}\n\n    // 用于有效性验证的数据\n    this._checkData = this._storage.get(this._CHECK_KEY)\n\n    // 当前`key`的`storage`是否已经存在\n    this._isNew = this._checkData === NULL\n\n    this._fastCache = {}\n  }\n\n  // 惰性初始化 在首次调用`set、get、remove`方法时才执行一次 且只执行一次\n  // @private\n  // @note 为什么要做惰性初始化, 因为当数据大时，可以把读取数据的时间推迟\n  // 到第一次调用`set、get、remove`方法时, 从而可以非常快的创建`storage`实例\n  _lazyInit() {\n\n    // 没有对应的本地缓存 或 本地缓存已过期 则 创建新的`storage`实例\n    if (this._isNew || this.isOutdated()) {\n      // 新的数据内容\n      this._storage.set(this._DATA_KEY, this._data = {})\n    }\n\n    // 如果有对应的本地缓存，则将数据添加到`this._data`上\n    else {\n      this._data = this._storage.get(this._DATA_KEY)\n      if (this._data === NULL) {\n        this._storage.set(this._DATA_KEY, this._data = {})\n      }\n    }\n\n    // 更新验证条件，用于下次检查有效性\n    // 只有真正调用了实例方法，才会更新验证数据。\n    // 这样可以在`nattyStorage.clean`方法中，将那些仅实例化但不使用的缓存实例清理掉。\n    this._storage.set(this._CHECK_KEY, this._checkData = {\n      key: this.config.key,\n      tag: this.config.tag,\n      lastUpdate: this._createStamp,\n      duration: this.config.duration,\n      until: this.config.until,\n    })\n  }\n\n  // 判断当前`key`的`storage`是否已经过期\n  // @returns {boolean}\n  isOutdated() {\n    if (this.config.tag && this.config.tag !== this._checkData.tag) {\n      return TRUE\n    }\n\n    const now = +new Date()\n    // 注意要使用`_checkData`的`duration`验证, 而不是用`config`的`duration`验证!!\n    if (this._checkData.duration && now - this._checkData.lastUpdate > this._checkData.duration) {\n      return TRUE\n    }\n\n    if (this._checkData.until && now > this._checkData.until) {\n      return TRUE\n    }\n\n    return FALSE\n  }\n\n  // 把指定的`plain object`对象设置为`storage`的值\n  data(data) {\n    if (!this._data) {\n      this._lazyInit()\n    }\n\n    if (!isPlainObject(data)) {\n      throw new Error(`The argument for data() must be a plain object. Invalid: ${data}`)\n    }\n\n    // 整体设置，置空缓存\n    this._fastCache = {}\n\n    // step1: 备份数据\n    this._backupData = this._data\n\n    try {\n      // step2: 更新`this._data`\n      this._data = data\n\n      // step3: 将`this._data`存储到`storage`中\n      this._storage.set(this._DATA_KEY, this._data)\n    } catch (e) {\n      // 如果存储失败了，恢复原有数据\n      // 保持`this._data`和`storage`中的值同步，是最基本的功能\n      this._storage.set(this._DATA_KEY, this._data = this._backupData)\n\n      throw new Error(e)\n    }\n  }\n\n  // 同步设置数据\n  // @param path {String} optional 要设置的值的路径 或 要设置的完整值\n  // @param value {Any} 要设置的值\n  set(path, data) {\n    if (!this._data) {\n      this._lazyInit()\n    }\n\n    // `env`只能用于`type`为`variable`的场景\n    if (this.config.type !== 'variable' && isEnv(data)) {\n      throw new Error(`'env' value can NOT be used for 'type: ${this.config.type}'`)\n    }\n\n    if (typeof path !== 'string') {\n      throw new Error(`The first argument for set() must be a string. Invalid: ${path}`)\n    }\n\n    // 值有变，删除快速缓存\n    delete this._fastCache[path]\n\n    // step1: 备份数据\n    this._backupData = this._data\n\n    try {\n      // step2: 更新`this._data`\n      // 注意 `setValueByPath`方法是有抛错场景的 比如给字符串值又添加了新的属性\n      setValueByPath(path, data, this._data)\n\n      // step3: 将`this._data`存储到`storage`中\n      this._storage.set(this._DATA_KEY, this._data)\n    } catch (e) {\n      // 如果存储失败了，恢复原有数据\n      // 保持`this._data`和`storage`中的值同步，是最基本的功能\n      this._storage.set(this._DATA_KEY, this._data = this._backupData)\n\n      throw new Error(e)\n    }\n  }\n\n  // 获取指定的路径的数据\n  // @param path {String} optional 要获取的值的路径 如果不传 则返回整体值\n  // @returns {Any}\n  // instance.get()\n  // instance.get('foo')\n  // instance.get('foo.bar')\n  get(path, fallbackValue) {\n    if (!this._data) {\n      this._lazyInit()\n    }\n\n    // 如果有快速缓存 则返回缓存的值\n    if (this._fastCache.hasOwnProperty(path)) {\n      return this._fastCache[path]\n    }\n\n    let data\n\n    try {\n      if (path) {\n        data = getValueByPath(path, this._data)\n      } else {\n        data = this._data\n      }\n    } catch (e) {\n      throw new Error(e)\n    }\n\n    data = data !== UNDEFINED ? data : fallbackValue\n\n    // 记录快速缓存\n    this._fastCache[path] = data\n\n    return data\n  }\n\n  // 如果取到的值是`undefined`，会抛出错误\n  sure(path) {\n    const value = this.get(path)\n    if (value === UNDEFINED) {\n      throw new Error(`Unexpected undefined value returned by path '${path}'`)\n    }\n    return value\n  }\n\n  // 返回指定的路径是否有值\n  // @param path {String} optional 要查询的路径\n  has(path) {\n    if (!this._data) {\n      this._lazyInit()\n    }\n\n    if (!path) {\n      throw new Error('a `key|path` argument should be passed into the `has` method')\n    }\n\n    return hasValueByPath(path, this._data) ? {\n      has: TRUE,\n      value: getValueByPath(path, this._data),\n    } : {\n      has: FALSE,\n      value: UNDEFINED,\n    }\n  }\n\n  // 删除指定的路径的数据, 包括键本身\n  // @param path {String} optional 要获取的值的路径 如果不传 则返回整体值\n  remove(path) {\n    if (!this._data) {\n      this._lazyInit()\n    }\n\n    // step1: 备份数据\n    this._backupData = this._data\n\n    // step2: 更新`this._data`\n    if (path) {\n      // 如果有`path` 删除对应的键值对\n      removeKeyAndValueByPath(path, this._data)\n    } else {\n      // 删除所有数据, 即复原到初始空对象\n      this._data = {}\n    }\n\n    // step3: 将`this._data`存储到`storage`中\n    try {\n      this._storage.set(this._DATA_KEY, this._data)\n    } catch (e) {\n      // 如果存储失败了，恢复原有数据\n      // 保持`this._data`和`storage`中的值同步，是最基本的功能\n      this._storage.set(this._DATA_KEY, this._data = this._backupData)\n      throw new Error(e)\n    }\n  }\n\n  // 销毁当前`storage`实例\n  destroy() {\n    this._data = NULL\n    this._checkData = NULL\n    this._fastCache = NULL\n    this._storage.remove(this._DATA_KEY)\n    this._storage.remove(this._CHECK_KEY)\n    for (let prop in this.constructor.prototype) {\n      if (this.constructor.prototype.hasOwnProperty(prop)) {\n        this[prop] = UNDEFINED\n      }\n    }\n  }\n\n  dump() {\n    if (!this._data) {\n      this._lazyInit()\n    }\n\n    if (JSON && hasConsole) {\n      console.log(JSON.stringify(this._data, NULL, 4))\n    }\n  }\n}\n\n// 添加异步方法：asyncSet asyncGet asyncHas asyncRemove asyncDestroy\nconst methodHasAsyncMode = ['set', 'get', 'has', 'remove', 'destroy']\nfor (let i=0, l=methodHasAsyncMode.length; i<l; i++) {\n  let method = methodHasAsyncMode[i]\n  Storage.prototype['async' + method.charAt(0).toUpperCase() + method.substr(1)] = function () {\n    return new Promise((resolve, reject) => {\n      try {\n        resolve(this[method].apply(this, arguments))\n      } catch(e) {\n        reject(e)\n      }\n    })\n  }\n}\n\nfunction createStorage(storage) {\n  //  不用担心这个window, 这个函数能调用, 说明已经是在浏览器端了\n  storage = window[storage]\n  // storage = storage === 'localStorage' ? localStorage : sessionStorage\n  return {\n    // NOTE  值为undefined的情况, JSON.stringify方法会将键删除\n    // JSON.stringify({x:undefined}) === \"{}\"\n    set: function (key, value) {\n      storage.setItem(key, JSON.stringify(value))\n    },\n    get: function (key) {\n      let value = storage.getItem(key)\n      // alert(localStorage[key])\n      if (!value) return NULL\n      try {\n        value = JSON.parse(value)\n      } catch (e) {\n        hasConsole && console.log(e)\n      }\n      return value\n    },\n    remove: function (key) {\n      storage.removeItem(key)\n    },\n  }\n}\n\nlet variable = {}\nfunction createVariable() {\n  let storage = variable\n  return {\n    set: function (key, value) {\n      storage[key] = value\n    },\n    get: function (key) {\n      // 当对应的键不存在时, 返回值保持和`storage`一致。\n      if (!(key in storage)) {\n        return NULL\n      }\n      return storage[key]\n    },\n    remove: function (key) {\n      delete storage[key]\n    },\n  }\n}\n\nfunction reserveString (str) {\n  return str.split(EMPTY).reverse().join(EMPTY)\n}\n\nfunction splitPathToKeys (path) {\n  let ret\n  if (path.indexOf('\\\\.') === -1) {\n    ret = path.split('.')\n  } else {\n    ret = reserveString(path).split(/\\.(?!\\\\)/).reverse()\n    for (let i=0, l=ret.length; i<l; i++) {\n      ret[i] = reserveString(ret[i].replace(/\\.\\\\/g, '.'))\n    }\n  }\n  return ret\n}\n\n// 注意 该方法是有抛错场景的\nfunction setValueByPath(path, value, data) {\n  let keys = splitPathToKeys(path)\n  let bottomData = data\n  while (keys.length) {\n    let key = keys.shift()\n    if (keys.length) {\n      bottomData[key] = bottomData[key] || {}\n      bottomData = bottomData[key]\n    } else {\n      if (isPlainObject(bottomData)) {\n        bottomData[key] = value\n      } else {\n        const nonPlainObjectPath = path.replace(new RegExp('\\\\.' + key + '$'), '')\n        /* eslint-disable */\n        throw new Error(`Cannot create property '${key}' on '${nonPlainObjectPath}'(non-plain-object) node: ${isEnv(bottomData) ? bottomData.get() : bottomData}`)\n        /* eslint-enable */\n      }\n    }\n  }\n  return data\n}\n\n// 对`path`进行递归取值\nfunction getValueByPath(path, data, isKey) {\n  isKey = isKey || false\n  if (isKey === true || path.indexOf('.') === -1) {\n    // 如果是`env`对象，则根据环境变量取值，否则直接返回\n    return isEnv(data[path]) ? data[path].get() : data[path]\n  } else {\n    let keys = splitPathToKeys(path)\n\n    while(keys.length) {\n      let key = keys.shift()\n      data = getValueByPath(key, data, true)\n\n      if (typeof data !== 'object' || data === UNDEFINED) {\n        if (keys.length) data = UNDEFINED\n        break\n      }\n    }\n    return data\n  }\n}\n\n// @return {Boolean}\nfunction hasValueByPath(path, data, isKey) {\n  // 首次调用, 如果没有`.`, 就是key的含义\n  isKey = isKey || path.indexOf('.') === -1\n  if (isKey) {\n    return data.hasOwnProperty(path)\n  } else {\n    let keys = splitPathToKeys(path)\n    while(keys.length) {\n      let key = keys.shift()\n      let hasKey = data.hasOwnProperty(key)\n      if (hasKey && keys.length) {\n        data = getValueByPath(key, data, true)\n        if (!isPlainObject(data)) {\n          return FALSE\n        }\n      } else {\n        return hasKey\n      }\n    }\n  }\n}\n\nfunction removeKeyAndValueByPath(path, data) {\n  let keys = splitPathToKeys(path)\n  let bottomData = data\n  while (keys.length) {\n    let key = keys.shift()\n    if (keys.length) {\n      bottomData[key] = bottomData[key] || {}\n      bottomData = bottomData[key]\n    } else {\n      delete bottomData[key]\n    }\n  }\n  return data\n}\n\nfunction isSupportStorage() {\n  if (!hasWindow) {\n    return FALSE\n  }\n\n  if (typeof localStorage !== 'object') {\n    return FALSE\n  }\n\n  // 执行到这里，说明存在`storage`对象, 但, 有了也不一定能用!!! 比如隐身模式, 所以需要进一步验证\n  // `Safari`在隐身模式下会触发错误\n  let support = TRUE\n  try {\n    const a = '__nstest__'\n    localStorage.setItem(a, a)\n    support = localStorage.getItem(a) === a\n    localStorage.removeItem(a)\n  } catch (e) {\n    support = FALSE\n  }\n  return support\n}\n\nconst nattyStorage = options => {\n  return new Storage(options)\n}\n\nnattyStorage.version = '__VERSION__'\nnattyStorage._variable = variable\nnattyStorage.supportStorage = supportStorage\n\nnattyStorage.each = function (fn = noop) {\n  const map = {\n    variable: nattyStorage._variable,\n  }\n\n  if (supportStorage) {\n    map.localStorage = localStorage\n    map.sessionStorage = sessionStorage\n  }\n\n  for (let type in map) {\n    for (let key in map[type]) {\n      if (map[type].hasOwnProperty(key) && key.indexOf('NSCheck:') > -1) {\n        let storage = nattyStorage({\n          key: key.match(/NSCheck:(.*)/)[1],\n          type: type,\n        })\n        fn(storage)\n      }\n    }\n  }\n}\n\n// 清理localStorage中过期的缓存\nnattyStorage.clean = function () {\n  this.each(storage => {\n    if (storage.isOutdated()) {\n      storage.destroy()\n    }\n  })\n}\n\nnattyStorage.list = function () {\n  this.each(storage => {\n    hasConsole && console.log(storage.config.type, storage.config.key, storage.get())\n  })\n}\n\n// 内置处理一次过期数据\nnattyStorage.clean()\n\nnattyStorage.env = env\n\nexport default nattyStorage","export const hasWindow = 'undefined' !== typeof window\nexport const hasConsole = 'undefined' !== typeof console\nconst NULL = null\nconst toString = Object.prototype.toString\n\n/**\n * 变换两个参数的函数到多个参数\n * @param  {Function} fn 基函数\n * @return {Function} 变换后的函数\n * @demo\n *    function add(x, y) { return x+y; }\n *    add = redo(add);\n *    add(1,2,3) => 6\n */\nconst redo = fn => function() {\n  const args = arguments\n  let ret = fn(args[0], args[1])\n  for (let i = 2, l = args.length; i < l; i++) {\n    ret = fn(ret, args[i])\n  }\n  return ret\n}\n\nconst OBJECT = 'object'\nconst isObject = v => {\n  return typeof v === OBJECT && v !== NULL\n}\n\nconst isWindow = v => {\n  return v !== NULL && v === v.window\n}\n\n// 参考了zepto\nexport const isPlainObject = v => {\n  return v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype\n}\n\nconst ARRAY_TYPE = '[object Array]'\nexport const isArray = v => {\n  return toString.call(v) === ARRAY_TYPE\n}\n\n/**\n * 对象扩展\n * @param  {Object} receiver\n * @param  {Object} supplier\n * @return {Object} 扩展后的receiver对象\n * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!\n */\nlet _extend = (receiver = {}, supplier = {}) => {\n  for (let key in supplier) {\n    // `supplier`中不是未定义的键 都可以执行扩展\n    if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {\n      if (isArray(supplier[key])) {\n        receiver[key] = [].concat(supplier[key])\n      } else if (isPlainObject(supplier[key])) {\n        receiver[key] = _extend({}, supplier[key])\n      } else {\n        receiver[key] = supplier[key]\n      }\n    }\n  }\n  return receiver\n}\n\nexport const extend = redo(_extend)\n\nexport const noop = function () {}\n\nconst chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'\nexport const randomString = (n = 32) => {\n  let str = ''\n  for (let i = 0; i < n; i += 1) {\n    str += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return str\n}\n","import {randomString} from './util'\n\nclass ParentEnv {}\n\n// 工厂函数，返回`env`实例对象\n// `env`对象的特点：\n//   - `env`对象一旦创建，它对应的值就不可以再更改\n//   - `env`对象取值的唯一方式是调用`get`方法\nconst factory = (env, hash) => {\n  const random = randomString(6)\n  const hashKey = `_${random}`\n  const envKey = `_${random}:env`\n\n  class Env extends ParentEnv {\n    constructor() {\n      super()\n      this[hashKey] = hash\n      this[envKey] = env\n    }\n\n    get() {\n      return this[hashKey][env] !== undefined ? this[hashKey][env] : undefined\n    }\n  }\n  return new Env()\n}\n\n// 判断是不是`Env`的实例对象，因为`Env`类是由工厂方法动态生成的，所以用`ParentEnv`即可\nexport const isEnv = v => v instanceof ParentEnv\n\n// @param {String} key 环境变量\n// @param {Object} hash 环境变量所有值的映射\n// @demo\n//   env(NODE_ENV, {\n//     development: 'http://0.0.0.0/api',\n//     production: 'http://foo.com/api',\n//   })\nexport const env = (key, hash) => {\n  return factory(key, hash)\n}"],"names":["createStorage","storage","window","set","key","value","setItem","JSON","stringify","get","let","getItem","NULL","parse","e","hasConsole","console","log","remove","removeItem","createVariable","variable","reserveString","str","split","EMPTY","reverse","join","splitPathToKeys","path","ret","indexOf","i","l","length","replace","setValueByPath","data","keys","bottomData","shift","isPlainObject","const","nonPlainObjectPath","RegExp","Error","isEnv","getValueByPath","isKey","UNDEFINED","hasValueByPath","hasOwnProperty","hasKey","FALSE","removeKeyAndValueByPath","hasWindow","toString","Object","prototype","isObject","v","isWindow","getPrototypeOf","isArray","call","_extend","receiver","supplier","undefined","concat","extend","fn","args","arguments","noop","chars","randomString","n","charAt","Math","floor","random","ParentEnv","factory","env","hash","hashKey","envKey","super","this","Env","TRUE","supportStorage","localStorage","support","a","defaultGlobalConfig","type","tag","duration","until","Storage","options","config","_storage","_CHECK_KEY","_DATA_KEY","_createStamp","Date","_backupData","_checkData","_isNew","_fastCache","_lazyInit","isOutdated","_data","lastUpdate","now","fallbackValue","sure","has","destroy","prop","constructor","this$1","dump","methodHasAsyncMode","method","toUpperCase","substr","Promise","resolve","reject","apply","nattyStorage","version","_variable","each","map","sessionStorage","match","clean","list"],"mappings":"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"}